/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusDraw -p dbusdraw com.deepin.Draw.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSDRAW_H
#define DBUSDRAW_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.Draw
 */
class DBusDraw: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.Draw"; }
    static inline const char *staticInterfacePath()
    { return "/com/deepin/Draw"; }

public:
    DBusDraw(QObject *parent = 0);
    ~DBusDraw();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> activeWindow()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("activeWindow"), argumentList);
    }

    inline QDBusPendingReply<> openImage(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("openImage"), argumentList);
    }
    inline QDBusPendingReply<> loadImage(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("loadImage"), argumentList);
    }
Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    typedef ::DBusDraw Draw;
  }
}
#endif
